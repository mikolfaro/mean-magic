"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngSanitize","ngAnimate","ui.router","ui.bootstrap","ui.utils","ngLodash","autocomplete"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("cards"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("expansions"),ApplicationConfiguration.registerModule("prints"),ApplicationConfiguration.registerModule("users"),angular.module("cards").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Cards","cards","dropdown","/cards(/create)?"),Menus.addSubMenuItem("topbar","cards","List Cards","cards"),Menus.addSubMenuItem("topbar","cards","New Card","cards/create")}]),angular.module("cards").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCards",{url:"/cards",templateUrl:"modules/cards/views/list-cards.client.view.html"}).state("createCard",{url:"/cards/create",templateUrl:"modules/cards/views/create-card.client.view.html"}).state("viewCard",{url:"/cards/:cardId",templateUrl:"modules/cards/views/view-card.client.view.html"}).state("editCard",{url:"/cards/:cardId/edit",templateUrl:"modules/cards/views/edit-card.client.view.html"})}]),angular.module("cards").controller("CardsController",["$scope","$stateParams","$location","$state","Authentication","Cards","Prints",function($scope,$stateParams,$location,$state,Authentication,Cards,Prints){$scope.authentication=Authentication,$scope.create=function(){var card=new Cards({name:this.name,manaCost:this.manaCost,convertedManaCost:this.convertedManaCost,type:this.type,rules:this.rules,transformsInto:this.transformsInto});null!==this._type&&(card._type=this._type,"creature"===card._type?(card.power=this.power,card.toughness=this.toughness):"planeswalker"===card._type&&(card.loyalty=this.loyalty)),card.$save(function(response){$location.path("cards/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(card){if(card){card.$remove();for(var i in $scope.cards)$scope.cards[i]===card&&$scope.cards.splice(i,1)}else $scope.card.$remove(function(){$location.path("cards")})},$scope.update=function(){var card=$scope.card;card.$update(function(){$location.path("cards/"+card._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.page=1,$scope.count=10,$scope.pageChanged=function(){$scope.find()},$scope.find=function(){$scope.cards=Cards.query({page:$scope.page,count:$scope.count,q:$scope.query},function(cards,headers){$scope.totalItems=headers("X-Item-Count")})},$scope.findOne=function(){$scope.card=Cards.get({cardId:$stateParams.cardId}),$scope.prints=Prints.query({card:$stateParams.cardId},function(prints){prints&&($scope.print=prints[0])})},$scope.changePrint=function(print){console.log(print),$scope.print=print},$scope.checkCardType=function(){var obj=this.card||this;obj._type=-1!==obj.type.indexOf("Planeswalker")?"planeswalker":-1!==obj.type.indexOf("Creature")?"creature":null},$scope.transform=function(){$scope.card.transformsInto&&$state.go("viewCard",{cardId:$scope.card.transformsInto._id})}}]),angular.module("cards").filter("iconifyMana",["ManaCostManipulator",function(ManaCostManipulator){return function(text){if(!text||0===text.length)return"";var manaMap={"{0}":"mana_0.png","{1}":"mana_1.png","{2}":"mana_2.png","{3}":"mana_3.png","{4}":"mana_4.png","{5}":"mana_5.png","{6}":"mana_6.png","{7}":"mana_7.png","{8}":"mana_8.png","{9}":"mana_9.png","{10}":"mana_10.png","{11}":"mana_11.png","{12}":"mana_12.png","{13}":"mana_13.png","{14}":"mana_14.png","{15}":"mana_15.png","{B}":"mana_B.png","{R}":"mana_R.png","{U}":"mana_U.png","{W}":"mana_W.png","{G}":"mana_G.png","{BR}":"mana_BR.png","{BG}":"mana_BG.png","{WB}":"mana_WB.png","{BU}":"mana_BU.png","{RG}":"mana_RG.png","{RW}":"mana_RW.png","{UR}":"mana_UR.png","{GW}":"mana_GW.png","{GU}":"mana_GU.png","{WU}":"mana_WU.png","{2/B}":"mana_2B.png","{2/R}":"mana_2R.png","{2/U}":"mana_2U.png","{2/W}":"mana_2W.png","{2/G}":"mana_2G.png","{BP}":"mana_BP.png","{RP}":"mana_RP.png","{UP}":"mana_UP.png","{WP}":"mana_WP.png","{GP}":"mana_GP.png","{X}":"mana_X.png","{Y}":"mana_Y.png","{Z}":"mana_Z.png","{T}":"mana_T.png"};return text.replace(/(\{[\{\dWPXTURBG\}]*\})/g,function(matched){return ManaCostManipulator.split(matched).map(function(value){return'<img class="mana" src="modules/cards/img/mana/'+manaMap[value]+'" alt="'+value+'" />'}).join("")})}}]).filter("markReminderText",[function(){return function(reminderText){return reminderText&&0!==reminderText.length?reminderText.replace(/(\(.*?\))/g,function(matched){return'<span class="reminder-text">'+matched+"</span>"}):""}}]),angular.module("cards").factory("Cards",["$resource",function($resource){return $resource("cards/:cardId",{cardId:"@_id"},{update:{method:"PUT"}})}]),angular.module("cards").factory("ManaCostManipulator",["lodash",function(_){return{split:function(stringCost){var result=stringCost.split(/(\{[^\{\}]*\})/);return result=_.compact(result)}}}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("expansions").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Expansions","expansions","dropdown","/expansions(/create)?"),Menus.addSubMenuItem("topbar","expansions","List Expansions","expansions"),Menus.addSubMenuItem("topbar","expansions","New Expansion","expansions/create")}]),angular.module("expansions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listExpansions",{url:"/expansions",templateUrl:"modules/expansions/views/list-expansions.client.view.html"}).state("createExpansion",{url:"/expansions/create",templateUrl:"modules/expansions/views/create-expansion.client.view.html"}).state("viewExpansion",{url:"/expansions/:expansionId",templateUrl:"modules/expansions/views/view-expansion.client.view.html"}).state("editExpansion",{url:"/expansions/:expansionId/edit",templateUrl:"modules/expansions/views/edit-expansion.client.view.html"})}]),angular.module("expansions").controller("ExpansionsController",["$scope","$stateParams","$location","Authentication","Expansions",function($scope,$stateParams,$location,Authentication,Expansions){$scope.authentication=Authentication,$scope.create=function(){var expansion=new Expansions({name:this.name,code:this.code});expansion.$save(function(response){$location.path("expansions/"+response._id),$scope.name="",$scope.code=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(expansion){if(expansion){expansion.$remove();for(var i in $scope.expansions)$scope.expansions[i]===expansion&&$scope.expansions.splice(i,1)}else $scope.expansion.$remove(function(){$location.path("expansions")})},$scope.update=function(){var expansion=$scope.expansion;expansion.$update(function(){$location.path("expansions/"+expansion._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.expansions=Expansions.query()},$scope.findOne=function(){$scope.expansion=Expansions.get({expansionId:$stateParams.expansionId})}}]),angular.module("expansions").factory("Expansions",["$resource",function($resource){return $resource("expansions/:expansionId",{expansionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("prints").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Prints","prints","dropdown","/prints(/create)?"),Menus.addSubMenuItem("topbar","prints","List Prints","prints"),Menus.addSubMenuItem("topbar","prints","New Print","prints/create")}]),angular.module("prints").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPrints",{url:"/prints",templateUrl:"modules/prints/views/list-prints.client.view.html"}).state("createPrint",{url:"/prints/create",templateUrl:"modules/prints/views/create-print.client.view.html"}).state("viewPrint",{url:"/prints/:printId",templateUrl:"modules/prints/views/view-print.client.view.html"}).state("editPrint",{url:"/prints/:printId/edit",templateUrl:"modules/prints/views/edit-print.client.view.html"})}]),angular.module("prints").controller("PrintsController",["$scope","$stateParams","$location","Authentication","Prints","Cards","Expansions",function($scope,$stateParams,$location,Authentication,Prints,Cards,Expansions){$scope.authentication=Authentication,$scope.searchCards=function(cardQuery){return console.log(cardQuery),Cards.query({page:1,count:10,q:cardQuery}).$promise.then(function(cards){return console.log(cards),cards})},Expansions.query(function(expansions){$scope.expansions=expansions}),$scope.create=function(){var print=new Prints({card:$scope.card._id,expansion:$scope.expansion._id,collectorNumber:this.collectorNumber,flavorText:this.flavorText,illustrator:this.illustrator});print.$save(function(response){$location.path("prints/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(print){if(print){print.$remove();for(var i in $scope.prints)$scope.prints[i]===print&&$scope.prints.splice(i,1)}else $scope.print.$remove(function(){$location.path("prints")})},$scope.update=function(){var print=$scope.print;print.$update(function(){$location.path("prints/"+print._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.prints=Prints.query()},$scope.findOne=function(){$scope.print=Prints.get({printId:$stateParams.printId})}}]),angular.module("prints").filter("iconifyExpansion",[function(){return function(expansionCode){return expansionCode&&0!==expansionCode.length?'<img class="expansion-symbol" src="modules/expansions/img/symbol/'+expansionCode+'_symbol.png" alt="'+expansionCode+'" />':""}}]),angular.module("prints").factory("Prints",["$resource",function($resource){return $resource("prints/:printId",{printId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",["lodash",function(_){var _this=this;return _this._data={user:window.user,isAdmin:function(){return _.intersection(window.user.roles,["admin"]).length>0}},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);